#include <stdio.h>
#include <string.h>

#define MAX 100

int nStates;
int epsilon[MAX][MAX];       // ε-transitions: epsilon[from][i] = to
int epsilonCount[MAX];       // Number of ε-transitions from each state
int closure[MAX][MAX];       // closure[state][i] = state in ε-closure
int closureSize[MAX];        // Number of states in ε-closure[state]
int visited[MAX];            // Visited array for DFS

void dfs(int from, int current) {
    for (int i = 0; i < epsilonCount[from]; i++) {
        int next = epsilon[from][i];
        if (!visited[next]) {
            visited[next] = 1;
            closure[current][closureSize[current]++] = next;
            dfs(next, current);
        }
    }
}

void computeClosures() {
    for (int i = 0; i < nStates; i++) {
        memset(visited, 0, sizeof(visited));
        visited[i] = 1;
        closureSize[i] = 0;
        closure[i][closureSize[i]++] = i;
        dfs(i, i);
    }
}

void printClosures() {
    printf("\nEpsilon Closures:\n");
    for (int i = 0; i < nStates; i++) {
        printf("ε-closure(q%d): { ", i);
        for (int j = 0; j < closureSize[i]; j++) {
            printf("q%d ", closure[i][j]);
        }
        printf("}\n");
    }
}

int main() {
    int nEps;
    printf("Enter number of states: ");
    scanf("%d", &nStates);

    printf("Enter number of ε-transitions: ");
    scanf("%d", &nEps);

    printf("Enter ε-transitions (from to):\n");
    for (int i = 0; i < nEps; i++) {
        int from, to;
        scanf("%d %d", &from, &to);
        epsilon[from][epsilonCount[from]++] = to;
    }

    computeClosures();
    printClosures();

    return 0;
}







#include<stdio.h>
#include<string.h>

char result[20][20], copy[20], states[20][20];

void add_state(char a[20], int i){ 
    strcpy(result[i], a); 
}

void display(int n){ 
    int k=0; 
    printf("\nEpsilon closure of %s = { ", copy); 
    while(k < n){ 
        printf(" %s", result[k]); 
        if(k < n-1) printf(",");  
        k++; 
    } 
    printf(" }\n"); 
}

int main(){ 
    FILE* ipfile; 
    ipfile = fopen("input.txt", "r"); 
    if(ipfile == NULL){
        printf("Error: could not open input.txt\n");
        return 1;
    }

    char state[20], state1[20], state2[20], input[20]; 
    int end, i=0, n, k=0;   

    printf("\nEnter the number of states: "); 
    scanf("%d",&n); 

    printf("\nEnter the states: "); 
    for(k=0; k<n; k++)   //
        scanf("%s", states[k]);   

    for(k=0; k<n; k++){ 
        i=0; 
        strcpy(state, states[k]); 
        strcpy(copy, state); 
        add_state(state, i++);   // closure always includes itself

        while(1){ 
            end = fscanf(ipfile,"%s%s%s", state1, input, state2); 
            if(end == EOF) 
                break;       

            if(strcmp(state, state1) == 0 && strcmp(input,"e") == 0){ 
                add_state(state2, i++); 
                strcpy(state, state2); 
            } 
        } 

        display(i); 
        rewind(ipfile);  // reset file pointer for next state
    } 

    fclose(ipfile);   
    return 0; 
}
