%{
 #include "demo.tab.h"
 #include <stdio.h>
%}

%%
[0-9]+	{yylval.num = atoi(yytext); return NUMBER;}

"+" 	{return PLUS;}
"-"	{return MINUS;}
"*"	{return MUL;}
"/"	{return DIV;}
"("	{return LPAREN;}
")"	{return RPAREN;}
[\n] 	{return '\n';}

%%

int yywrap()
{
return 1;
}

%{
#include <stdio.h>
#include <stdlib.h>

int yyparse();
void yyerror(char *s);
int yylex(void);
%}

%union
{
	int num;
}
%token <num> NUMBER;
%type <num> expr;
%token PLUS MINUS MUL DIV LPAREN RPAREN
%left PLUS MINUS
%left MUL DIV
%right UMINUS

%%
input:

	|input expr '\n' {printf("%d",$2);}
	
;
expr:
    NUMBER
    | expr PLUS expr 	{$$ = $1 + $3;}
    | expr MINUS expr 	{$$ = $1 - $3;}
    | expr MUL expr 	{$$ = $1 * $3;}
    | expr DIV expr 	{
			if ($3 == 0) {
				yyerror("Division by zero");
				$$ = 0;
			} else {
				$$ = $1 / $3;
			}
		}
    | LPAREN expr RPAREN {$$ = $2;}
    | MINUS expr %prec UMINUS { $$ = -$2; }
    ;
%%

int main(){
printf("Enter the expression: ");
yyparse();
return 0;
}
void yyerror(char *s){
fprintf(stderr, "Error: %s\n",s);
}
