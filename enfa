
****************************************************************************
#include <stdio.h>
#include <string.h>

#define MAX 100

int nStates, nSymbols;
char symbols[MAX];

int epsilon[MAX][MAX], epsilonCount[MAX];
int nfa[MAX][MAX][MAX], nfaCount[MAX][MAX];
int closure[MAX][MAX], closureSize[MAX];
int result[MAX][MAX][MAX], resultCount[MAX][MAX];
int visited[MAX];

int symbolIndex(char c) {
    for (int i = 0; i < nSymbols; i++)
        if (symbols[i] == c) return i;
    return -1;
}

void dfs(int from, int current) {
    for (int i = 0; i < epsilonCount[from]; i++) {
        int next = epsilon[from][i];
        if (!visited[next]) {
            visited[next] = 1;
            closure[current][closureSize[current]++] = next;
            dfs(next, current);
        }
    }
}

void computeClosures() {
    for (int i = 0; i < nStates; i++) {
        memset(visited, 0, sizeof(visited));
        visited[i] = 1;
        closureSize[i] = 0;
        closure[i][closureSize[i]++] = i;
        dfs(i, i);
    }
}

void buildEquivalentNFA() {
    for (int s = 0; s < nStates; s++) {
        for (int i = 0; i < closureSize[s]; i++) {
            int state = closure[s][i];
            for (int sym = 0; sym < nSymbols; sym++) {
                for (int t = 0; t < nfaCount[state][sym]; t++) {
                    int dest = nfa[state][sym][t];
                    for (int j = 0; j < closureSize[dest]; j++) {
                        int final = closure[dest][j];
                        int exists = 0;
                        for (int x = 0; x < resultCount[sym][s]; x++) {
                            if (result[sym][s][x] == final) {
                                exists = 1;
                                break;
                            }
                        }
                        if (!exists)
                            result[sym][s][resultCount[sym][s]++] = final;
                    }
                }
            }
        }
    }
}

void printEquivalentNFA() {
    printf("\nEquivalent NFA (without ε-transitions):\n");
    for (int s = 0; s < nStates; s++) {
        for (int sym = 0; sym < nSymbols; sym++) {
            printf("q%d --%c--> ", s, symbols[sym]);
            if (resultCount[sym][s] == 0) {
                printf("∅");
            } else {
                for (int i = 0; i < resultCount[sym][s]; i++) {
                    printf("q%d ", result[sym][s][i]);
                }
            }
            printf("\n");
        }
    }
}

int main() {
    int nEps, nTrans;
    printf("Enter number of states: ");
    scanf("%d", &nStates);

    printf("Enter number of input symbols (excluding ε): ");
    scanf("%d", &nSymbols);

    printf("Enter the symbols: ");
    for (int i = 0; i < nSymbols; i++)
        scanf(" %c", &symbols[i]);

    printf("Enter number of ε-transitions: ");
    scanf("%d", &nEps);
    printf("Enter ε-transitions (from to):\n");
    for (int i = 0; i < nEps; i++) {
        int from, to;
        scanf("%d %d", &from, &to);
        epsilon[from][epsilonCount[from]++] = to;
    }

    printf("Enter number of regular transitions: ");
    scanf("%d", &nTrans);
    printf("Enter transitions (from symbol to):\n");
    for (int i = 0; i < nTrans; i++) {
        int from, to;
        char sym;
        scanf("%d %c %d", &from, &sym, &to);
        int idx = symbolIndex(sym);
        if (idx == -1) {
            printf("Invalid symbol '%c'\n", sym);
            return 1;
        }
        nfa[from][idx][nfaCount[from][idx]++] = to;
    }

    computeClosures();
    buildEquivalentNFA();
    printEquivalentNFA();

    return 0;
}
**************************************************************

#include <stdio.h>
#include <stdlib.h>

struct node {
    int st;
    struct node *link;
};

static int set[20], nostate, noalpha, s, notransition, nofinal,
           start, finalstate[20], c, r, buffer[20], newstate;
char alphabet[20];
static int e_closure[20][20] = {0};
struct node *transition[20][20] = {NULL};

int findalpha(char c) {
    for (int i = 0; i < noalpha; i++)
        if (alphabet[i] == c)
            return i;
    return 999;
}

void insert_trantbl(int r, char c, int s) {
    int j = findalpha(c);
    if (j == 999) {
        printf("error\n");
        exit(0);
    }
    struct node *temp = (struct node *)malloc(sizeof(struct node));
    temp->st = s;
    temp->link = transition[r][j];
    transition[r][j] = temp;
}

void findclosure(int x, int sta) {
    if (buffer[x]) return;
    e_closure[sta][c++] = x;
    buffer[x] = 1;

    // check epsilon transitions (epsilon is last alphabet)
    if (alphabet[noalpha - 1] == 'e' && transition[x][noalpha - 1] != NULL) {
        struct node *temp = transition[x][noalpha - 1];
        while (temp != NULL) {
            findclosure(temp->st, sta);
            temp = temp->link;
        }
    }
}

void unionclosure(int i) {
    int j = 0, k;
    while (e_closure[i][j] != 0) {
        k = e_closure[i][j];
        set[k] = 1;
        j++;
        newstate++;
    }
}

void print_e_closure(int i) {
    int j;
    printf("{");
    for (j = 0; e_closure[i][j] != 0; j++)
        printf("q%d,", e_closure[i][j]);
    printf("}");
}

void findfinalstate() {
    int i, j, k;
    for (i = 0; i < nofinal; i++) {
        for (j = 1; j <= nostate; j++) {
            for (k = 0; e_closure[j][k] != 0; k++) {
                if (e_closure[j][k] == finalstate[i]) {
                    printf("q%d ", j);
                    break;
                }
            }
        }
    }
    printf("\n");
}

int main() {
    int i, j, k, m, t, n;
    struct node *temp;

    printf("Enter the number of alphabets: ");
    scanf("%d", &noalpha);
    getchar();
    printf("NOTE:- [use letter e as epsilon, must be last]\n");
    printf("\nEnter alphabets: ");
    for (i = 0; i < noalpha; i++) {
        alphabet[i] = getchar();
        getchar();
    }

    printf("Enter the number of states: ");
    scanf("%d", &nostate);
    printf("Enter the start state: ");
    scanf("%d", &start);
    printf("Enter the number of final states: ");
    scanf("%d", &nofinal);
    printf("Enter the final states: ");
    for (i = 0; i < nofinal; i++)
        scanf("%d", &finalstate[i]);
    printf("Enter no of transitions: ");
    scanf("%d", &notransition);
    printf("NOTE:- [Transition format: qno alphabet qno]\n");
    printf("NOTE:- [States are numbered starting from 1]\n");

    printf("\nEnter transitions--\n");
    for (i = 0; i < notransition; i++) {
        char ch;
        scanf("%d %c%d", &r, &ch, &s);
        insert_trantbl(r, ch, s);
    }

    // compute epsilon closure for each state
    for (i = 1; i <= nostate; i++) {
        c = 0;
        for (j = 0; j < 20; j++) {
            buffer[j] = 0;
            e_closure[i][j] = 0;
        }
        findclosure(i, i);
    }

    printf("\nEquivalent NFA without epsilon\n");
    printf("-----------------------------------\n");
    printf("Start state: q%d\n", start);

    printf("Alphabets: ");
    for (i = 0; i < noalpha; i++)
        if (alphabet[i] != 'e')
            printf("%c ", alphabet[i]);

    printf("\nStates:");
    for (i = 1; i <= nostate; i++)
        printf(" q%d", i);

    printf("\nTransitions:\n");
    for (i = 1; i <= nostate; i++) {
        for (j = 0; j < noalpha - 1; j++) {  // exclude epsilon
            for (m = 1; m <= nostate; m++)
                set[m] = 0;
            newstate = 0;

            for (k = 0; e_closure[i][k] != 0; k++) {
                t = e_closure[i][k];
                temp = transition[t][j];
                while (temp != NULL) {
                    unionclosure(temp->st);
                    temp = temp->link;
                }
            }

            if (newstate == 0) continue;  // no transition

            printf("\t");
            print_e_closure(i);
            printf(" --%c--> {", alphabet[j]);
            for (n = 1; n <= nostate; n++) {
                if (set[n] != 0)
                    printf("q%d,", n);
            }
            printf("}\n");
        }
    }

    printf("Final states: ");
    findfinalstate();

    return 0;
}
