#include <stdio.h>
#include <string.h>
#define MAX 50

char stack[MAX], input[MAX];
char table[10][10];
char terminals[10];
int n;

int idx(char symbol) {
    for (int i = 0; i < n; i++) {
        if (terminals[i] == symbol)
            return i;
    }
    return -1;
}

int main() {
    int i, j, top = 0;
    char temp[MAX], a, b;
    int col, row;

    printf("Enter number of terminals: ");
    scanf("%d", &n);
    printf("Enter the terminals (single characters like + * i $):\n");
    scanf("%s", terminals);
    printf("\nEnter operator precedence table values (<, >, =):\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            printf("Enter value for %c %c: ", terminals[i], terminals[j]);
            scanf(" %c", &table[i][j]);
        }
    }

    printf("\n**** OPERATOR PRECEDENCE TABLE ****\n\t");
    for (i = 0; i < n; i++)
        printf("%c\t", terminals[i]);
    printf("\n");
    for (i = 0; i < n; i++) {
        printf("%c\t", terminals[i]);
        for (j = 0; j < n; j++)
            printf("%c\t", table[i][j]);
        printf("\n");
    }
    printf("\nEnter the input string (e.g., id+id*id): ");
    scanf("%s", temp);

    int k = 0, m = 0;
    while (temp[k] != '\0') {
        if (temp[k] == 'i' && temp[k + 1] == 'd') {
            input[m++] = 'i';
            k += 2;
        } else {
            input[m++] = temp[k++];
        }
    }
    input[m++] = '$';
    input[m] = '\0';

    stack[top] = '$';
    printf("\nSTACK\t\tINPUT\t\tACTION\n");
    printf("%s\t\t%s\t", stack, input);

    i = 0;
    while (1) {
        a = stack[top];
        b = input[i];
        col = idx(a);
        row = idx(b);
        if (col == -1 || row == -1) {
            printf("\nError: invalid symbol.\n");
            break;
        }
        if (a == '$' && b == '$') {
            printf("\nString Accepted.\n");
            break;
        } else if (table[col][row] == '<' || table[col][row] == '=') {
            stack[++top] = table[col][row];
            stack[++top] = b;
            printf("Shift %c\n", b);
            i++;
        } else if (table[col][row] == '>') {
            while (stack[top] != '<')
                top--;
            top--;
            printf("Reduce\n");
        } else {
            printf("\nError: string not accepted.\n");
            break;
        }
        printf("%s\t\t", stack);
        for (int p = i; p < strlen(input); p++)
            printf("%c", input[p]);
        printf("\t");
    }

    return 0;
}

#include <stdio.h>
#include <string.h>
#define MAX_INPUT 100
#define MAX_STACK 100

char input[MAX_INPUT], stack[MAX_STACK];
int input_len, stack_top = -1;
int curr_pos = 0;
void check();
void print_stack();
int main() {
    printf("GRAMMAR is:\nE -> E+E | E*E | (E) | id\n");
    printf("Enter input string: ");
    scanf("%s", input);
    input_len = strlen(input);
    printf("\nStack\t\tInput\t\tAction\n");
    while(curr_pos < input_len) {
        if(input[curr_pos] == 'i' && input[curr_pos+1] == 'd') {
            stack[++stack_top] = 'I';
            stack[stack_top+1] = '\0';
            printf("$");
            print_stack();
            printf("\t\t%s$\t\tSHIFT->id\n", input + curr_pos + 2);
            curr_pos += 2;
            check();
        } else {
            stack[++stack_top] = input[curr_pos];
            stack[stack_top+1] = '\0';
            printf("$");
            print_stack();
            printf("\t\t%s$\t\tSHIFT->%c\n", input + curr_pos + 1, input[curr_pos]);
            curr_pos++;
            check();
        }
    }
    if(stack_top == 0 && stack[0] == 'E') {
        printf("\nInput string is VALID.\n");
    } else {
        printf("\nInput string is INVALID.\n");
    }
    return 0;
}
void check() {
    int handle_size;
    char *handle;
    while(1) {
        if(stack_top >=0 && stack[stack_top]=='I') {
            handle = "id"; handle_size = 1;
        } else if(stack_top>=2 && stack[stack_top-2]=='E' && stack[stack_top-1]=='+' && stack[stack_top]=='E') {
            handle = "E+E"; handle_size = 3;
        } else if(stack_top>=2 && stack[stack_top-2]=='E' && stack[stack_top-1]=='*' && stack[stack_top]=='E') {
            handle = "E*E"; handle_size = 3;
        } else if(stack_top>=2 && stack[stack_top-2]=='(' && stack[stack_top-1]=='E' && stack[stack_top]==')') {
            handle = "(E)"; handle_size = 3;
        } else {
            return; 
        }
        stack_top -= handle_size - 1;
        stack[stack_top] = 'E';
        stack[stack_top+1] = '\0';
        printf("$");
        print_stack();
        printf("\t\t%s$\t\tREDUCE->%s\n", input + curr_pos, handle);
}   }
void print_stack() {
    for(int i = 0; i <= stack_top; i++) {
        if(stack[i]=='I') printf("id");
        else printf("%c", stack[i]);
    }
}
